name: ci

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: [main]
    paths-ignore:
      - 'docs/**'
      - '**/*.md'
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      auto_gen:
        description: "Use AutoGen agents"
        type: boolean
        required: false
        default: false

permissions:
  contents: read
  pull-requests: write

concurrency:
  group: ci-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build-test:
    name: build-test
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      TZ: Asia/Tokyo
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Cache (pnpm + .next/cache)
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-next-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', 'next.config.*', 'tsconfig*.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            ${{ runner.os }}-

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Build
        run: pnpm build

  tests:
    name: tests
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      TZ: Asia/Tokyo
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Cache (pnpm + .next/cache)
        uses: actions/cache@v4
        with:
          path: |
            ~/.pnpm-store
            .next/cache
          key: ${{ runner.os }}-pnpm-${{ hashFiles('pnpm-lock.yaml') }}-next-${{ hashFiles('**/*.[jt]s', '**/*.[jt]sx', 'next.config.*', 'tsconfig*.json') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-
            ${{ runner.os }}-

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Unit Tests (vitest)
        run: pnpm test

  e2e-test:
    needs: build-test
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      TZ: Asia/Tokyo
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install deps
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          CI: true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 7

  ai-agent-review:
    name: ai-agent-review
    needs: [build-test, tests]
    if: ${{ always() && needs.build-test.result == 'success' && needs.tests.result == 'success' }}
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      TZ: Asia/Tokyo
      AUTO_GEN: ${{ inputs.auto_gen || github.event.inputs.auto_gen || 'false' }}
      BUILD_STATUS: ${{ needs.build-test.result }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r agents/requirements.txt

      - name: Run AI agent review
        shell: bash
        run: |
          if [ "${AUTO_GEN}" = "true" ]; then
            python scripts/agent_review_autogen.py | tee agent_report.txt
          else
            python scripts/agent_review.py | tee agent_report.txt
          fi
          if [ "${BUILD_STATUS}" != "success" ]; then
            {
              echo
              echo "---"
              echo " **Build/Test Failed**: Please review CI results."
              echo
              echo "**Build Status**: \`${BUILD_STATUS}\`"
            } >> agent_report.txt
          fi

      - name: Upload AI review artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: ai-review
          path: |
            agent_report.txt
            ai_review.json
            ai_review.md

      - name: Comment to PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let body = fs.readFileSync('agent_report.txt','utf8');
            const status = `${{ env.BUILD_STATUS }}`;
            if (status !== 'success') {
              body = ` **Build failed (${status}). Review below is based on source diff only.**\n\n` + body;
            }
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });

      - name: Slack notify
        if: ${{ always() && env.WEBHOOK != '' && github.event_name == 'pull_request' }}
        run: |
          if [ -f ai_review.json ]; then
            SUMMARY=$(jq -r '.slack_summary' ai_review.json 2>/dev/null || echo "")
            [ -z "$SUMMARY" ] && SUMMARY="$(head -n 30 agent_report.txt | sed 's/"/\\"/g' | tr '\n' ' ')"
          else
            SUMMARY="$(head -n 30 agent_report.txt | sed 's/"/\\"/g' | tr '\n' ' ')"
          fi
          payload=$(jq -n --arg t "${{ github.repository }} PR #${{ github.event.pull_request.number }}" --arg s "$SUMMARY" '{text: ($t+"\n"+$s)}')
          curl -sS -X POST -H 'Content-type: application/json' --data "$payload" "$WEBHOOK" >/dev/null 2>&1 || echo "Slack notification skipped"

      - name: Attach AI review to Job Summary
        if: ${{ always() }}
        run: |
          {
            echo "##  AI Review Summary"
            if [ -f ai_review.md ]; then cat ai_review.md; else echo "_No ai_review.md generated_"; fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment AI review to PR (fallback to commit)
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.existsSync('ai_review.md')
              ? fs.readFileSync('ai_review.md', 'utf8')
              : 'AI review artifact was not generated.';
            const { owner, repo } = context.repo;

            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: context.sha });
              prNumber = prs.data?.[0]?.number;
            }

            if (prNumber) {
              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              if (pr.data.state === 'open') {
                await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
              } else {
                await github.rest.repos.createCommitComment({ owner, repo, commit_sha: context.sha, body });
              }
            } else {
              await github.rest.repos.createCommitComment({ owner, repo, commit_sha: context.sha, body });
            }


  agent-runner:
    name: agent-runner
    needs: build-test
    if: ${{ always() && github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    concurrency:
      group: ci-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    env:
      TZ: Asia/Tokyo
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r agents/requirements.txt

      - name: Run agent orchestrator
        id: run_orchestrator
        shell: bash
        env:
          PR_TITLE: ${{ github.event.pull_request.title }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          TOPIC="PR #${PR_NUMBER}: ${PR_TITLE}"
          echo "Topic: ${TOPIC}"
          python scripts/agent_run.py --topic "${TOPIC}" --path "**/*.tsx" --verbose | tee agent_runner_output.txt
          OUTDIR=$(ls -1dt artifacts/agent_reports/* | head -n 1)
          echo "outdir=${OUTDIR}" >> "$GITHUB_OUTPUT"

      - name: Upload agent-runner artifacts
        if: ${{ always() }}
        uses: actions/upload-artifact@v4
        with:
          name: agent-runner
          path: |
            ${{ steps.run_orchestrator.outputs.outdir }}
            agent_runner_output.txt

      - name: Attach Agent Runner Summary
        if: ${{ always() }}
        run: |
          OUTDIR='${{ steps.run_orchestrator.outputs.outdir }}'
          {
            echo "## Agent Runner Summary"
            if [ -f "$OUTDIR/summary.md" ]; then cat "$OUTDIR/summary.md"; else echo "_No summary generated_"; fi
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Comment Agent Runner summary to PR
        if: ${{ always() && github.event_name == 'pull_request' }}
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = process.env.OUTDIR || '${{ steps.run_orchestrator.outputs.outdir }}';
            const p = path + '/summary.md';
            const body = fs.existsSync(p)
              ? fs.readFileSync(p, 'utf8')
              : 'Agent runner summary was not generated.';
            const { owner, repo } = context.repo;

            let prNumber = context.payload.pull_request?.number;
            if (!prNumber) {
              const prs = await github.rest.repos.listPullRequestsAssociatedWithCommit({ owner, repo, commit_sha: context.sha });
              prNumber = prs.data?.[0]?.number;
            }

            if (prNumber) {
              const pr = await github.rest.pulls.get({ owner, repo, pull_number: prNumber });
              if (pr.data.state === 'open') {
                await github.rest.issues.createComment({ owner, repo, issue_number: prNumber, body });
              } else {
                await github.rest.repos.createCommitComment({ owner, repo, commit_sha: context.sha, body });
              }
            } else {
              await github.rest.repos.createCommitComment({ owner, repo, commit_sha: context.sha, body });
            }

      - name: Run agent dispatcher
        run: python -m scripts.agents.dispatcher --task i18n_review --payload "{}"

      - name: Save agent result and check ok
        shell: bash
        run: |
          set -e
          mkdir -p artifacts/agent_reports
          python -m scripts.agents.dispatcher --task i18n_review --payload "{}" | tee artifacts/agent_reports/i18n_review.json
          ok=$(cat artifacts/agent_reports/i18n_review.json | jq -r '.ok')
          if [ "$ok" != "true" ]; then
            echo agent returned not ok
            exit 1
          fi

      - name: Upload agent result
        uses: actions/upload-artifact@v4
        with:
          name: agent-i18n-review
          path: artifacts/agent_reports/i18n_review.json


