name: CI Agent Pipeline

on:
  push:
    branches: [ "main", "feat/**", "fix/**" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  pull-requests: write

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: 9

      - name: Use Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"

      - name: Install deps (pnpm)
        if: ${{ hashFiles('pnpm-lock.yaml') != '' }}
        run: pnpm install --frozen-lockfile

      - name: Install deps (npm fallback)
        if: ${{ hashFiles('pnpm-lock.yaml') == '' }}
        run: npm ci

      - name: Lint
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm -s lint || true; else npm run lint --if-present; fi

      - name: Test
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm -s test || true; else npm run test --if-present -- --coverage; fi

      - name: Build
        run: |
          if [ -f pnpm-lock.yaml ]; then pnpm -s build || true; else npm run build --if-present; fi

  ai-agent-review:
    needs: build-test
    if: ${{ always() && github.event_name == 'pull_request' && needs.build-test.result == 'success' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install -r agents/requirements.txt

      - name: Run AI agent review (Phase 1)
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          python scripts/agent_review.py | tee agent_report.txt

      - name: Comment to PR
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const body = fs.readFileSync('agent_report.txt','utf8');
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body
            });
